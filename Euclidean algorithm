유클리드 호제법은 2개의 자연수 또는 정식의 최대공약수를 구하는 알고리즘의 하나이다.
2개의 자연수(또는 정식) a, b에 대해서 a를 b로 나눈 나머지를 r이라 하면(단, a>b), a와 b의 최대공약수는 b와 r의 최대공약수와 같다

예시)
78696과 19332의 최대공약수를 구하면

 78696 ＝ 19332×4 ＋ 1368
 19332 ＝ 1368×14 ＋ 180
  1368 ＝ 180×7 ＋ 108
   180 ＝ 108×1 + 72
   108 ＝ 72×1 ＋ 36
    72 ＝ 36×2
    
    
소스 코드)

int gcd(int a, int b) #재귀 버전
{
    /* 
     * eqaul logic
     * if (b==0) return a;
     * gcd(b, a%b)
    */
	return b ? gcd(b, a%b) : a; #b가 0이 될때 까지 재귀하고 0이 되면 a를 반환
}


int gcd(int a, int b) #반복문 버전
{
    while (b > 0)
    {
        int tmp = a;
        a = b;
        b = tmp%b;
    }
    return a;
}

# 최대 공약수를 이용하여 최소 공배수 
int lcm(int a, int b)
{
	return a * b / gcd(a,b);
}
