* 밀러라빈의 소수 판별법 : N이 소수인지 확률적으로 판단할 수 있는 판별법
https://namnamseo.tistory.com/entry/MillerRabin-%EC%86%8C%EC%88%98-%ED%8C%90%EC%A0%95%EB%B2%95
https://rebro.kr/46
 페르마의 소정리를 이용하여 이를 만족하는 수는 소수이고 하나라도 거짓이라면 소수가 아님
 2(log N)^2이하의 모든 a를 확인하면 소수인지 판별할 수 있다.
 
long long power(long long x, long long y, long long mod){
    long long res = 1;
    x %= mod;
    while(y){
        if(y % 2) res = (res * x) % mod;
        y /= 2;
        x = (x*x) % mod;
    }
    return res;    
}
 
//if n is prime, return true
bool miller(long long n, long long a){
    if(a % n == 0) return false;
    long long k = n-1;
    while(1){
        long long temp = power(a, k, n);
        if(temp == n-1) return true; //a^k = -1 (mod n)
        if(k%2) return (temp == 1 || temp == n-1);
        k /= 2;
    }
}

https://man-25-1.tistory.com/99

* Algorithm

먼저 n>1인 홀수인 정수가 있을때, n-1은 항상 짝수이다. 
따라서 n-1 = (2^k) * m으로 표현할 수 있다.  (단 k>1이고 m은 홀수 )
그리고 1< a < n-1인 a를 무작위로 선택한 뒤에 b0 = a^m mod n 을 계산한다.
이때 b0가 +1이나 -1이라면, n은 FLT에 의해 probably prime으로 판정된다. (불확실한 소수)
++ ( 그 이유는, b0가 남은 지수 연산 (2^k)에 의해 a^(n-1) mod n=1을 만족하여, FLT를 통과하게 됨)

만약 b0가 +-1이 아닌 다른 값이라면, b1 = b0^2 mod n을 통해 b1을 구한다. 즉 앞서 구한 a^m mod n에 2의 제곱을 한번 실행해준 것.

이때 b1 = 1 이라면 , FF에 의해 n은 합성수가 된다. ( b0^2 = b1^2 mod n이고 b0은 +-1이 아니므로)
       b1= -1 이라면, FLT에 의해 n은 소수가 된다. ( 남은 2^(k-1)의 연산을 수행하면 -1이 제곱되어 1이 됨)
       b1이 +-1이 아니라면 b2 = b1 ^2 mod n 을 계산하여 위와 같은 과정을 반복한다.

이렇게 b(k-1)까지 위 과정을 반복해서, 수도 프라임을 제외하는 소수 판별을 시행한다.

* 알고리즘 구현(파이썬)

def miller_rabin_test(n,b,s,t):
    #n은 odd integer
    #b는 base
    # n-1 = 2^s *t
    x = pow(b, t, n)  # b0= b^t mod n
    if x == 1 or x == n-1:
        return 1
    else: #b0가 +-1이 아니라면
        for i in range(s):
            if x==n-1:
                return 1
            x= pow(x,2,n)
        return 0

def is_prime(n):
    s=0
    if n<2 or not n&1:
        return 0 #짝수이거나 1은 소수가 아니다.
    if n==2:
        return 1 #2는 소수이다.
    t = (n-1)
    while t%2==0:
        s=s+1
        t>>=1
    for i in range(0,25):
        b = random.randrange(2,n-1);
        test=miller_rabin_test(n, b, s, t)
        if test==0:
            return 0
    return 1




출처: https://rebro.kr/46 [Rebro의 코딩 일기장]
* 에라토스테네스의 체 : 범위에서 합성수를 지우는 방식으로 소수를 찾는 방법. 
  1. 1은 제거
  2. 지워지지 않은 수 중 제일 작은 2를 소수로 채택하고, 나머지 2의 배수를 모두 지운다. 
  3. 지워지지 않은 수 중 제일 작은 3을 소수로 채택하고, 나머지 3의 배수를 모두 지운다. 
  4. 지워지지 않은 수 중 제일 작은 5를 소수로 채택하고, 나머지 5의 배수를 모두 지운다. 
  5. (반복)
  
  
* 파이썬 코드  
  n=1000
a = [False,False] + [True]*(n-1)
primes=[]

for i in range(2,n+1):
  if a[i]:
    primes.append(i)
    for j in range(2*i, n+1, i):
        a[j] = False
print(primes)


def prime_list(n):
    # 에라토스테네스의 체 초기화: n개 요소에 True 설정(소수로 간주)
    sieve = [True] * n

    m = int(n ** 0.5)
    for i in range(2, m + 1):
        if sieve[i] == True:           # i가 소수인 경우 
            for j in range(i+i, n, i): # i이후 i의 배수들을 False 판정
                sieve[j] = False

    # 소수 목록 산출
    return [i for i in range(2, n) if sieve[i] == True]
