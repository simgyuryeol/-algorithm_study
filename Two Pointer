* 투 포인터 (Two Pointers)
- 리스트에 순차적으로 접근해야 할 때 두 개의 점의 위치를 기록하면서 처리하는 알고리즘
- 정렬되어있는 두 리스트의 합집합에도 사용됨. 병합정렬(merge sort)의 counquer 영역의 기초
- 시간복잡도 O(N)

* 대표 문제 
 : 특정한 합을 가지는 부분 연속 수열 찾기
 
 1. 시작점과 끝점이 첫번째 원소의 인덱스를 가리키도록 한다.
 2. 현재 부분 합이 M과 같다면 카운트한다.
 3. 현재 부분 합이 M보다 작다면 end를 1 증가시킨다.
 4. 현재 부분 합이 M보다 크거나 같다면 start를 1 증가시킨다.
 5. 모든 경우를 확인할 때까지 2-4번 과정을 반복한다.
 


n = 5 # 데이터의 개수 N
m = 5 # 찾고자하는 부분합 M
 
count = 0
interval_sum = 0
end = 0
 
# start를 차례대로 증가시키며 반복
for start in range(n):
    # end만큼 이동시키기
    while interval_sum < m and end < n:
        interval_sum += data[end]
        end += 1
    # 부분합이 m일 때 카운트 증가
    if interval_sum == m:
        count += 1
    interval_sum -= data[start]
 
print(count)


====================================
* 소수의 연속 합

count=0 #최종 경우의 수
start=0
end=0
# num은 소수의 집합, N은 구하고자 하는 수
while  end<=len(num): #투포인트 알고리즘 end가 소수의 수보다 작을 때 까지
    
    if N==sum(num[start:end]): #start부터 end까지의 합이 N과 같다면 경우의 수 +1하고 end+1
        count+=1
        end+=1
    elif N> sum(num[start:end]): # N보다 작으면 범위를 넓혀 end+1
        end+=1
    elif N<sum(num[start:end]): # N보다 크다면 범위를 좁혀 start+1
        start+=1
