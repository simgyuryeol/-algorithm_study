백트래킹(backtracking)이란? : 해를 찾는 도중 해가 아니어서 막히면, 되돌아가서 다시 해를 찾아가는 기법을 말합니다. 최적화 문제와 결정 문제를 푸는 방법이 됩니다

* DFS와 백트래킹

- 깊이 우선 탐색(DFS)
DFS는 가능한 모든 경로(후보)를 탐색합니다. 따라서, 불필요할 것 같은 경로를 사전에 차단하거나 하는 등의 행동이 없으므로 경우의 수를 줄이지 못합니다.
따라서 N! 가지의 경우의 수를 가진 문제는 DFS로 처리가 불가능할 것입니다.

- 백트래킹(Backtracking)
 해를 찾아가는 도중, 지금의 경로가 해가 될 것 같지 않으면 그 경로를 더이상 가지 않고 되돌아갑니다.
 즉, 코딩에서는 반복문의 횟수까지 줄일 수 있으므로 효율적입니다.
 답이 될 만한지 판단하고 그렇지 않으면 그 부분까지 탐색하는 것을 하지 않고 가지치기 하는 것(불필요한 부분을 쳐내고 최대한 올바른 쪽으로 간다는 의미)
 
 주로 문제 풀이에서는 DFS 등으로 모든 경우의 수를 탐색하는 과정에서, 조건문 등을 걸어 답이 절대로 될 수 없는 상황을 정의하고, 
 그러한 상황일 경우에는 탐색을 중지시킨 뒤 그 이전으로 돌아가서 다시 다른 경우를 탐색하게끔 구현할 수 있습니다.
 
 대표적인 예시) 
 
 * 백준 9663- N_Queen (https://www.acmicpc.net/problem/9663)
 
 def dfs(queen, row, n): #(체스판, 현재 체스칸, 입력 N값)
    count = 0
    if n == row: # 모든 체스를 전부다 두었으면 1을 리턴한다
        return 1
    for col in range(n): # 1부터 N까지 체스말을 둔다
        queen[row] = col # 체스판을 1차원 배열로 만들어서 값을 넣어준다
        for i in range(row): #이전 값을 비교
            if queen[i] == queen[row]: # 일직선상 겹칠시 break
                break
            if abs(queen[i]-queen[row]) == row - i: #대각선에 겹칠시 break
                break
        else: # 괜찮으면 다음칸으로 이동
            count += dfs(queen, row + 1, n)
            
    return count #최종 값 리턴
def solution(n):
    return dfs([0]*n, 0, n)
    
    
*  부분집합 구하기

# [1,2,3,4,5,6,7,8,9,10]의 powerset중 원소의 합이 10인 부분집합을 모두 출력하라
def subset(k,sum_num):
    global cnt
    cnt +=1
    if sum_num > 10:    # 가지치기
        return
    if k == n:          # 목표도달
        if sum_num == 10:
            for i in range(n):
                if visited[i]:
                    print(arr[i], end=" ")
            print()
        return

    else:
        visited[k] = 1
        subset(k+1,sum_num+arr[k])
        visited[k] = 0
        subset(k+1,sum_num)
arr = [1,2,3,4,5,6,7,8,9,10]
n = len(arr)
cnt = 0
visited = [0]* n
subset(0,0)


* 순열 구하기
 
# 백트래킹을 이용한 순열구현
def backtrack(result, visited,k,n):
    if k == n:
        print(result)
        return
    # 사용 가능한 선택지 후보군에 대하여 다음단계로 진행
    for i in range(n):
        if not visited[i]:         # 선택되지 않았다면
            visited[i] = 1
            result[k] = i     # result의 idx에 i저장
            backtrack(result, visited, k+1, n)
            visited[i] = 0
n = 5
backtrack([0]*n,[0]*n,0,n) 
 
