* 플로이드 와샬 알고리즘 
 : 모든 정점에서 모든 정점으로의 최단 경로를 구하고 싶을 때 사용

- 모든 쌍을 표현하는 행렬(이차원 배열)을 선언하고 다이나믹 프로그래밍 방식으로 각각의 원소들(각 쌍의 최단거리)을 업데이트 해나간다
- 점화식 👉 distance[i,j] = min(distance[i,j], distance[i,n] + distance[n,j]
정점 i에서 정점 n을 거쳐서 정점 j로 갈 때, n을 거쳐 가는 것이 더 최단경로일 경우 업데이트 한다.

int INF = 1000000;

int a[4][4] = {
  { 0, 5, INF, 8 },
  { 7, 0, 9, INF },
  { 2, INF, 0, 4 },
  { INF, INF, 3, 0 }
};

// 시간복잡도 V^3
for(int k = 0; k < 4; k++)  // k 는 거쳐가는 정점
  for(int i = 0; i < 4; i++)  // i 는 행 (출발 정점)
    for(int j = 0; j < 4; j++)  // j 는 열 (도착 정점)
      if (a[i][k] + a[k][j] < a[i][j])  // 점화식 distance[i,j] = min(distance[i,j], distance[i,n] + distance[n,j])
        a[i][j] = a[i][k] a[k][j];
        
        
- 응용 (순위 문제)
https://programmers.co.kr/learn/courses/30/lessons/49191 (프로그래머스 순위)

1. 풀이 
: 모든 경기를 비교해서 값에 1을 넣는다. 그리고 관련되어 있는 선수 경기를 보고 1값을 업데이트 해준다. 그 후 2차원 리스트의 가로 세로 값이 n값과 같으면 모든 선수와 비교를 햇으니 answer+=1
def solution(n, results):
    answer = 0
    
    a=[[50000]*n for i in range(n)] #경기 기록 업데이트
    
    for i in range(len(results)): # 경기 기록 입력
        a[results[i][1]-1][results[i][0]-1]=1
        
    for i in range(n): # 자신과의 경기는 0 기록
        a[i][i]=0
        
    for k in range(n): # 다른 선수와 연관되어 있는 기록 업데이트
        for i in range(n):
            for j in range(n):
                if a[k][i]==1 and a[j][k]==1:
                    a[j][i]=1

    for i in range(n): 
        count=0
        for j in range(n): # 가로줄 비교
            if a[i][j] !=50000:
                count+=1
            if a[j][i]!=50000: # 세로줄 비교
                count+=1
        if count==n+1: # 가로 세로 값이 n+1과 같으면 모든 선수와 비교한 것이므로 answer+=1
            answer+=1 

    return answer
    
    
2. 풀이
: 모든 경기를 비교해서 이기면 1 지면 -1을 넣는다 그리고 연관된 경기도 비교해서 이기면 1 지면 -1을 넣어 리스트에 50000이 없으면 모든 선수와 비교를 했으니 answer+=1을 넣어준다
    def solution(n, results):
    answer = 0
    
    a=[[50000]*n for i in range(n)]
    
    for i in range(len(results)): # 경기 기록 이기면 1 지면 -1값 넣음
        a[results[i][1]-1][results[i][0]-1]=1
        a[results[i][0]-1][results[i][1]-1]=-1
    
    for i in range(n): # 자신과의 경기는 0값
        a[i][i]=0
    
    for k in range(n): 
        for i in range(n):
            for j in range(n):
                if a[k][i]==1 and a[j][k]==1: # 연관된 두 경기가 둘다 1이면 1값
                    a[j][i]=1
                if a[k][i]==-1 and a[j][k]==-1: # 둘다 -1이면 -1값을 넣어줌
                    a[j][i]=-1

    for i in range(len(a)): # 값안에 50000이 없으면 모든 선수와 비교한 것이므로 answer+=1
        if 50000 not in a[i]:
            answer+=1

    return answer
    
    3. 풀이(다른사람 풀이)
: 
def solution(n, results):
    # wins[key] = key가 이긴 사람들의 집합
    # loses[key] = key가 이기지 못한 사람들의 집합
    wins, loses = {}, {}
    for i in range(1, n+1):
        wins[i], loses[i] = set(), set()
    
    for i in range(1, n+1):
        for battle in results:
            if battle[0] == i: # i의 승리. i가 이긴 사람들
                wins[i].add(battle[1])
            if battle[1] == i: # i의 패배. i가 진 사람들
                loses[i].add(battle[0])
        # i를 이긴 사람들 (loses[i]) => i에게 진 사람(wins[i])은 반드시 이긴다
        for winner in loses[i]:
            wins[winner].update(wins[i])
        # i에게 진 사람들 (wins[i]) => i를 이긴 사람들(loses[i])에게는 반드시 진다
        for loser in wins[i]:
            loses[loser].update(loses[i])
            
    cnt = 0
    for i in range(1, n+1):
        if len(wins[i]) + len(loses[i]) == n - 1: #이긴 사람과 진 사람의 수가 n-1과 같다면 자신을 제외한 모든 선수와 비교한 것이므로 +1
            cnt += 1
    return cnt
